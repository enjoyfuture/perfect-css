// Result Output Tests
// ===================


// Pass Details
@include test-module('pass-details [mixin]') {
  @include test('Properly output a passing assertion result') {
    @include assert('passing test') {
      @include output {
        @include _true-pass-details;
      }

      @include expect {
        /*   ✔ [output] passing test */
      }
    }
  }
}


// Variable Details
@include test-module('variable-details [function]') {
  @include test('Number') {
    @include assert-equal(
      _true-variable-details(1em),
      '[number] 1em');
  }

  @include test('String') {
    $string: unquote('hello world');

    @include assert-equal(
      _true-variable-details($string),
      '[string] #{$string}');
  }

  @include test('Color') {
    @include assert-equal(
      _true-variable-details(#ccc),
      '[color] #ccc');
  }

  @include test('Map') {
    $map: ('key': 'value');

    @include assert-equal(
      _true-variable-details($map),
      '[map] ("key": "value")');
  }

  @include test('Comma List') {
    $list: ('one', 'two');

    @include assert-equal(
      _true-variable-details($list),
      '[comma-list] "one", "two"');
  }

  @include test('Space List') {
    $list: ('one' 'two');

    @include assert-equal(
      _true-variable-details($list),
      '[space-list] "one" "two"');
  }
}


// EdgeFail Notes
@include test-module('edgefail-notes [function]') {
  @include test('Type mismatch') {
    $message: '- Details: variable types do not match (set `$inspect: true` to compare output values)';

    @include assert-equal(
      _true-edgefail-notes(1em, '1em'),
      $message);

    $list: ('one', 'two');
    $string: inspect($list);

    @include assert-equal(
      _true-edgefail-notes($list, $string),
      $message);
  }

  $string-one: unquote('hello world');
  $string-two: quote('hello world');

  @if ($string-one != $string-two) {
    @include test('String quotes') {
      $message: '- Details: string quotations do not match';

      @include assert-equal(
        _true-edgefail-notes($string-one, $string-two),
        $message);
    }
  }

  @include test('Number rounding') {
    $message: '- Details: numbers may need to be rounded before comparison (set `$inspect: true` to compare output values)';

    @include assert-equal(
      _true-edgefail-notes(1/3, 0.333333333),
      $message);
  }

  @include test('Color rounding') {
    $message: '- Details: colors may need to be rounded before comparison (set `$inspect: true` to compare output values)';

    @include assert-equal(
      _true-edgefail-notes(lighten(#246, 15%), #356a9f),
      $message);
  }

  @include test('List Separators') {
    $message: '- Details: list-separators do not match';

    $space: join((), 'one', space);
    $comma: join((), 'one', comma);

    @include assert-equal(
      _true-edgefail-notes($space, $comma),
      $message);
  }
}

// Fail Details
@include test-module('fail-details [mixin]') {
  @include test('Compiles full failure details') {
    @include assert {
      @include output {
        @include _true-context('assert', '[assert-equal] Test assertion');
        @include _true-fail-details(1/3, 0.333333333, not 'terminal');
        @include _true-context-pop;
      }

      @include expect {
        /*   ✖ FAILED: [assert-equal] Test assertion */
        /*     - Output: [number] 0.33333 */
        /*     - Expected: [number] 0.33333 */
        /*     - Details: numbers may need to be rounded before comparison (set `$inspect: true` to compare output values) */
        /*     - Module: fail-details [mixin] */
        /*     - Test: Compiles full failure details */
      }
    }
  }
}
