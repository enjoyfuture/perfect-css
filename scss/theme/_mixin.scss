// theme mixin
@import "./variable";

/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $theme-property-values (_variables.scss).
 */
@mixin theme-prop($property, $style, $important: false) {
  @if not map-has-key($theme-property-values, $style) {
    @error "Invalid style specified! Choose one of #{map-keys($theme-property-values)}";
  }

  @if $important {
    #{$property}: map-get($theme-property-values, $style) !important;
    #{$property}: var(--theme-#{$style}, map-get($theme-property-values, $style)) !important;
  }

  @else {
    #{$property}: map-get($theme-property-values, $style);
    #{$property}: var(--theme-#{$style}, map-get($theme-property-values, $style));
  }
}

/**
 * Creates a rule to be used in Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .foo {
 *   color: black;
 *
 *   @include theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include theme-dark(".foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .foo--disabled {
 *   opacity: .38;
 *
 *   @include theme-dark(".foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
@mixin theme-dark($root-selector: null, $compound: false) {
  @if ($root-selector) {
    @at-root {
      @if ($compound) {
        #{$root-selector}-theme-dark#{&},
        .theme--dark & {
          @content;
        }
      }

      @else {
        #{$root-selector}-theme-dark &,
        .theme--dark & {
          @content;
        }
      }
    }
  }

  @else {
    &--theme-dark,
    .theme--dark & {
      @content;
    }
  }
}
