// 定义主题相关 function

// 颜色色彩系数
// 例如 _coefficient(0) => 0   _coefficient(1) => .000303526983549
// _coefficient(2) => .000607053967098  _coefficient(3) => .000910580950647

// sass 中只能精确到 15 位，即 precision 最大为15
@function coefficient($rgb) {
  $rgb: $rgb / 255;
  @return if($rgb < 0.03928, $rgb / 12.92, pow(($rgb + 0.055) / 1.055, 2.4));
}

// 计算色彩的相对亮度
// 遵循 WCAG 2.0 规范 https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
// https://www.w3.org/Translations/WCAG20-zh/  页面中查找 相对亮度
// 颜色分为 R G B 三基色, 值从 0 到 255
// 对于sRGB色彩空间，色彩的相对亮度是指定义 L = 0.2126 * R + 0.7152 * G + 0.0722 * B，其中R，G和B的定义为
//  function f($color) {
//   $color = $color / 255;
//   return $color < 0.03928 ? $color / 12.92 : Math.pow(($color + 0.055) / 1.055, 2.4);
// }
// 该定义已封装为函数 coefficient
@function theme-luminance($color) {
  $red: red($color);
  $green: green($color);
  $blue: blue($color);
  $r: coefficient($red);
  $g: coefficient($green);
  $b: coefficient($blue);
  @return .2126 * $r + .7152 * $g + .0722 * $b;
}

/**
 * 计算两种颜色的对比度，一般指前景色和背景色
 * https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests 第3点
 */

@function theme-contrast-ratio($back, $front) {
  $back-luminance: theme-luminance($back) + .05;
  $fore-luminance: theme-luminance($front) + .05;
  // 明亮度最大除以最小得多对比度
  @return max($back-luminance, $fore-luminance) / min($back-luminance, $fore-luminance);
}

// 根据给定的颜色来判断在文本上是使用深色还是浅色
// 如果$color是浅色，则返回深色 dark，否则为浅色 light
@function theme-light-or-dark($color) {
  // 最小对比度设为 3.1
  $minimum-contrast: 3.1;
  $light-contrast: theme-contrast-ratio($color, #fff);
  $dark-contrast: theme-contrast-ratio($color, rgba(#000, .87));

  // 当给定颜色与白色的对比度小于 3.1时，并且给定颜色与黑色的对比度大于给定颜色与白色的对比度时，
  // 返回 dark，否则 light

  @if ($light-contrast < $minimum-contrast) and ($dark-contrast > $light-contrast) {
    @return "dark";
  } @else {
    @return "light";
  }
}

// 根据 $theme-tone-property-values 中的 key 计算对应的变量名
// 比如 text-primary-on-primary 对应的变量名为 --theme-#{$theme-primary-tone}-primary

@function theme-tone-var($theme-tone-property) {
  $text-index: str-index($theme-tone-property, 'text-');
  $on-index: str-index($theme-tone-property, '-on-');
  $text-next-str: str-slice($theme-tone-property, $text-index + 5, $on-index - 1);
  $on-next-str: str-slice($theme-tone-property, $on-index + 4);
  $tone-light-or-dark: null;

  // 这里 scss 不支持形如 js 取变量的方式，故需要处理多个判断
  @if ($on-next-str == 'light') {
    $tone-light-or-dark: dark;
  } @else if ($on-next-str == 'dark') {
    $tone-light-or-dark: light;
  } @else if ($on-next-str == 'primary') {
    $tone-light-or-dark: $theme-primary-tone;
  } @else if ($on-next-str == 'primary-light') {
    $tone-light-or-dark: $theme-primary-light-tone;
  } @else if ($on-next-str == 'primary-dark') {
    $tone-light-or-dark: $theme-primary-dark-tone;
  } @else if ($on-next-str == 'secondary') {
    $tone-light-or-dark: $theme-secondary-tone;
  } @else if ($on-next-str == 'secondary-light') {
    $tone-light-or-dark: $theme-secondary-light-tone;
  } @else if ($on-next-str == 'secondary-dark') {
    $tone-light-or-dark: $theme-secondary-dark-tone;
  } @else if ($on-next-str == 'background') {
    $tone-light-or-dark: $theme-background-tone;
  }

  @return #{$tone-light-or-dark}-#{$text-next-str};
}

