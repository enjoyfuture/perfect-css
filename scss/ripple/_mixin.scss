// ripple mixin 波纹 涟漪
@import "../animation/variable";
@import "../theme/variable";
@import "keyframe";
@import "function";

// ripple 基本样式
@mixin ripple-base() {
  will-change: transform, opacity;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);

  // :focus 指获取焦点时，可以通过 tab 键切换或鼠标点击触发该伪类，而 :active 指鼠标点击或键盘按下时触发
  // 伪类 :active 时背景加重
  &:not(.ripple-impact) {
    &:focus::before,
    &:hover::before,
    &:active::before,
    &:active::after {
      opacity: .6;
      transition-duration: 85ms;
    }
  }
}

// 处理 ripple 背景
@mixin ripple-bg($config: ()) {
  $config: map-merge(ripple-default-config(), $config);
  $pseudo: map-get($config, pseudo);

  @if ($pseudo) {
    &#{$pseudo} {
      content: "";
      @include ripple-bg-base($config);
    }
  } @else {
    @include ripple-bg-base($config);
  }
}

// ripple bg 基础设置
@mixin ripple-bg-base($config) {
  $radius: map-get($config, radius);
  @include ripple-theme($config);
  position: absolute;
  top: calc(50% - #{$radius});
  left: calc(50% - #{$radius});
  width: $radius * 2;
  height: $radius * 2;
  border-radius: 50%;
  pointer-events: none;
  opacity: 0;
  transition: opacity 250ms linear;
}

// 设置 ripple 主题
@mixin ripple-theme($config) {
  $config: map-merge(ripple-default-config(), $config);
  @include ripple-backgroud-color($config);
}

// 设置 ripple 颜色
@mixin ripple-backgroud-color($config) {
  $background-color: map-get($config, background-color);
  $opacity: map-get($config, opacity);
  $theme-style: map-get($config, theme-style);

  // FIXME $theme-style 待处理，看是否需要该变量
  @if ($theme-style) {
    $theme-value: map-get($theme-property-values, $theme-style);
    @if ($theme-value == null) {
      $theme-value: map-get($theme-tone-property-values, $theme-style);
    }
    $css-var: $theme-value;
    $css-var: var(--theme-#{$theme-style}, $theme-value);
    background-color: rgba($theme-value, $opacity);

    // 可以动态的设置颜色透明度，属于 CSS 4 color 范畴，目前浏览器支持的不是很好
    // 可以用 rgba 来代替，但只能静态设置，不可以随着颜色和透明度的变化动态设置
    // https://drafts.csswg.org/css-color/#modifying-colors
    @supports (background-color: color(green a(10%))) {
      background-color: color(#{$css-var} a(#{percentage($opacity)}));
    }
  } @else {
    background-color: rgba($background-color, $opacity);
  }

}

// FIXME 由于 sass-lint 不支持 css variables，故这里用 #{} 包一层
// https://github.com/sasstools/sass-lint/issues/877
// 待 sass-lint 支持后，去掉包裹 #{}

// 更具有冲击力的动画效果
// 设置 ripple 基本变量，这些变量会根据调用的组件大小和位置，动态的修改其值
// 需要借助 JavaScript 来实现
@mixin ripple-impact() {
  #{--ripple-width}: 0;
  #{--ripple-height}: 0;
  #{--ripple-size}: 0;
  #{--ripple-left}: 0;
  #{--ripple-top}: 0;
  #{--ripple-scale}: 1;
  #{--ripple-translate-end}: 0;
  #{--ripple-translate-start}: 0;

  // 当 :active 时，显示背景
  // 当 :focus 时，添加该样式 ripple-impact-focused
  &.ripple-impact-focused::after,
  &:active::after {
    opacity: .6;
    transition-duration: 85ms;
  }
}

@mixin ripple-bg-impact($config: ()) {
  $config: map-merge(ripple-default-config(), $config);
  $pseudo: map-get($config, pseudo);
  $radius: map-get($config, radius);

  &#{$pseudo} {
    top: 0;
    left: 0;
    width: $radius;
    width: var(--ripple-size, $radius);
    height: $radius;
    height: var(--ripple-size, $radius);
    transform: scale(0);
    transform-origin: center center;
  }

  // 活动态
  &.ripple-impact-active#{$pseudo} {
    animation: 300ms ripple-radius-in forwards, 83ms ripple-opacity-in forwards;
  }

  // 取消活动态
  &.ripple-impact-inactive#{$pseudo} {
    animation: 300ms ripple-radius-out forwards, 83ms ripple-opacity-out forwards;
  }
}

// 无界限的波纹效果
@mixin ripple-unbounded($config: ()) {
  $config: map-merge(ripple-default-config(), $config);
  $pseudo: map-get($config, pseudo);
  $radius: map-get($config, radius);

  // 对于无界限，单独设置 .ripple-unbounded 为纯 CSS 实现
  // 设置.ripple-unbounded 和 .ripple-impact 为动画效果，需要结合 JavaScript 来展现动效
  .ripple-unbounded {
    overflow: visible;

    &::after {
      top: calc(50% - #{$radius / 2});
      top: var(--ripple-top, calc(50% - #{$radius / 2}));
      left: calc(50% - #{$radius / 2});
      left: var(--ripple-left, calc(50% - #{$radius / 2}));
      width: $radius;
      width: var(--ripple-size, $radius);
      height: $radius;
      height: var(--ripple-size, $radius);
    }
  }

  .ripple-impact {
    &.ripple-unbounded::after {
      transform: scale(0);
      transform: scale(var(--ripple-scale, 0));
    }
    &.ripple-unbounded::before {
      top: 0;
      top: var(--ripple-top, 0);
      left: 0;
      left: var(--ripple-left, 0);
    }
  }
}
