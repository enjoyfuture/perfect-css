@charset "UTF-8";
/**
* 关于 font weight 的设置，跟字体粗细值有关
* 1. 在 Safari 和 IOS 系统下，默认字体粗细分为
    100-300   400-500  600-700  800-900  四种，对应为
    lighter 比从父元素继承来的值更细(处在字体可行的粗细值范围内)。
    normal 正常粗细，与400等值。
    bold 加粗， 与700等值
    bolder 比从父元素继承来的值更粗 (处在字体可行的粗细值范围内)。
 如果设为 -apple-system 或 "PingFang SC"时，就会有更多的字体粗细，
  100 200 300 400 500 600-900 六种粗细
  其中 lighter 对应 100    normal 对应 400    bold 对应 700    bolder 对应 700

*  2 在 Chrome 下，默认字体粗细只有两种
   100-400 500-900 对应为 normal 和 bold，如果设置为 lighter，则等价于 normal， 设为 bolder 等价于 bold
   如果设为 "PingFang SC" 同样有六种字体粗细，参考上面
* 所以 font-weight 字体粗细跟字体有关。关于字体粗细的回退机制可以参考以下文章
  https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-weight
**/
/**
* 响应式和媒体查询，设备大小分界点为
{
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px
}
 */
/**
* 返回响应式设备大小的下一个名称值
* $name 当前值
* $breakpoint 响应式布局列表值
* $breakpoint-names 对应的所有键
* 比如 breakpoint-next(sm)  结果为 md
* breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px)) 结果为 md
* breakpoint-next(sm, $breakpoint-names: (xs sm md)) 结果为 md
* breakpoint-next(md, $breakpoint-names: (xs sm md)) 结果为 null
 */
/**
* 根据键返回响应式对应的媒体查询区间值的最小值， 如果没找到或值为0返回 null
* breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px)) 结果为 576px
* breakpoint-min(xs, (xs: 0, sm: 576px, md: 768px)) 结果为 null
 */
/**
* 根据键返回响应式对应的媒体查询区间值的最大值（即为下一个拐点值 - 1px）， 如果没找到返回 null
* breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px)) 结果为 767px
* breakpoint-max(md, (xs: 0, sm: 576px, md: 768px)) 结果为 null
 */
/**
* 如果 $name 为响应式最小值对应的键，怎返回一个空字符串，否则返回键前面加一个破折号，
* breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px)) 结果为 ""
* breakpoint-infix(md, (xs: 0, sm: 576px, md: 768px)) 结果为 "-md"
 */
/**
* 如果 $name 为最小值，即 xs 时，则不用媒体查询输出样式，否则为媒体查询输出，
* 并设置其最小宽度，即当设备宽度达到该值时，应用定义的该样式
.test {
  @include media-breakpoint-up(sm) {
    color: red;
  }
}
输出结果为
@media (min-width: 576px) {
  .test {
    color: red;
  }
}

.test {
  @include media-breakpoint-up(sm) {
    color: red;
  }
}
输出结果为
.test {
  color: red;
}
 */
/**
* 跟 media-breakpoint-up 相反 如果 $name 为最大值，即 xl 时，则使用媒体查询输出样式，否则不用媒体查询输出，
* 并设置其最大宽度，即当设备宽度小于等于该值时，应用定义的该样式
.test {
  @include media-breakpoint-down(sm) {
    color: red;
  }
}
输出结果为
@media (max-width: 767px) {
  .test {
    color: red;
  }
}

.test {
  @include media-breakpoint-down(xl) {
    color: red;
  }
}
输出结果为
.test {
  color: red;
}
 */
/**
* 设置媒体查询最大和最小区间样式
.test {
  @include media-breakpoint-between(sm, lg) {
    color: red;
  }
}
输出结果为
@media (min-width: 576px) and (max-width: 1199px) {
  .test {
    color: red;
  }
}
 */
/**
* 设置某一媒体查询区间最大和最小区间样式，比如 sm 的区间为 576px  767px
.test {
  @include media-breakpoint-only(sm) {
    color: red;
  }
}
输出结果为
@media (min-width: 576px) and (max-width: 767px) {
  .test {
    color: red;
  }
}
 */
/* 如果我们不使用响应式布局时，即把变量值 $enable-breakpoint 设为 false 时，*/
/*// 自定义 pow 函数，实现 n 的 m 次方，n 和 m 为任意正数
@function pow2($n, $m) {
  @return pow($n, $m)
}*/

/*# sourceMappingURL=maps/perfect-animation.css.map */
