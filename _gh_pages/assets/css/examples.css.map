{"version":3,"sources":["webpack:///./docs/assets/scss/common/_header.scss","webpack:///./components/theme/_mixin.scss","webpack:///./docs/assets/scss/examples.scss","webpack:///./docs/assets/scss/common/_footer.scss","webpack:///./docs/assets/scss/examples/_main.scss"],"names":[],"mappings":";;;;;AAEA,gBCkBI,2EACA,CDfJ,+BC8BI,8EACA,CD/BJ,qCC8BI,gDACA,CCNH,eCxBC,qBDsDD,QClDC,2BACA,WACA,eACA,qCACA,sBACA,eACA,CDsDD,gBEtEC,oBF0ED,yDEvEG,gBF6EH,sCEzEG,gBF8EH,iHEtEG,mB","file":"css/examples.css","sourcesContent":["@import \"../../../../components/theme/mixin\";\n\n.navbar-primary {\n  @include theme-prop(background-color, primary-dark);\n}\n\n.drawer-toggle {\n  .icon-pure-menu {\n    @include theme-prop(color, secondary-on-dark);\n  }\n\n  &:hover {\n    .icon-pure-menu {\n      @include theme-prop(color, primary-on-dark);\n    }\n  }\n}\n","// theme mixin\n@import \"./variable\";\n@import \"./function\";\n\n/**\n * Applies the correct theme color style to the specified property.\n * $property is typically color or background-color, but can be any CSS property that accepts color values.\n * $style should be one of the map keys in $theme-property-values (_variables.scss).\n */\n\n// ç»å±æ§ $property è®¾ç½®é¢è² $style å¼\n// å±æ§ $property ä¸è¬ç¨å¨ color background-color border-color ç­ï¼ä¹å¯ç¨å¨ä»»ä½å¯ä»¥è®¾ç½®é¢è²å¼çå±æ§ä¸\n// $style åºè¯¥æ¯ $theme-property-values ä¸­æä¸ª key\n// è¯¥ mixin ä¸»è¦ç¨æ¥è®¾ç½®ä¸»é¢é¢è²å¼ï¼å¹¶ä¸è®¾ç½®äºä¸»é¢ css åéå¼\n// ç¨æ·éè¿ä¿®æ¹ css åéå¼å¯ä»¥å¨æçä¿®æ¹æ´ä¸ªä¸»é¢å¼ï¼æ¯å¦å¨ body ä¸ä¿®æ¹ css åéå¼\n@mixin theme-color-prop($property, $style, $important) {\n  @if $important {\n    #{$property}: map-get($theme-property-values, $style) !important;\n    #{$property}: var(--theme-#{$style}, map-get($theme-property-values, $style)) !important;\n  } @else {\n    #{$property}: map-get($theme-property-values, $style);\n    #{$property}: var(--theme-#{$style}, map-get($theme-property-values, $style));\n  }\n}\n\n// ç¨æ¥è®¾ç½®ä¸»é¢è²å¯¹åºçå¯¹æ¯è²è°å¼ï¼æµè²è¿æ¯æ·±è²\n// $style åºè¯¥æ¯ $theme-contrast-tone-property-values ä¸­æä¸ª key\n// è¯¥ mixin é¤äºè®¾ç½®äºå¯¹æ¯è²è°å¼ï¼è¿è®¾ç½®äºå¯¹åºç css åéå¼\n@mixin theme-contrast-tone-prop($property, $style, $important) {\n  // æ ¹æ® $style è¿ååéï¼ä¸»è¦æ¯ light æ dark åé\n  $theme-var: theme-contrast-tone-var($style);\n\n  @if $important {\n    #{$property}: map-get($theme-contrast-tone-property-values, $style) !important;\n    #{$property}: var(--theme-#{$theme-var}, map-get($theme-contrast-tone-property-values, $style)) !important;\n  } @else {\n    #{$property}: map-get($theme-contrast-tone-property-values, $style);\n    #{$property}: var(--theme-#{$theme-var}, map-get($theme-contrast-tone-property-values, $style));\n  }\n}\n\n// è®¾ç½®è¾å©é¢è² mixin\n// æ ¹æ®ç»å®ç $style ($theme-assist-colors ä¸­ç key) å $opacity è®¾ç½®é¢è²\n@mixin theme-assist($property, $style, $opacity: 1, $important: false) {\n  @if type-of($style) == \"color\" {\n    @if $important {\n      #{$property}: $style !important;\n    } @else {\n      #{$property}: $style;\n    }\n  } @else {\n    $color: map-get($theme-assist-colors, $style);\n\n    @if ($property == \"backgroud-color\" and $opacity != 1) {\n      // åé --theme-#{$style} å¨ theme.scss ä¸­å®ä¹\n      $css-var: var(--theme-#{$style}, $color);\n\n      @if $important {\n        background-color: rgba($color, $opacity) !important;\n      } @else {\n        background-color: rgba($color, $opacity);\n      }\n\n      // å¯ä»¥å¨æçè®¾ç½®é¢è²éæåº¦ï¼å±äº CSS 4 color èç´ï¼ç®åæµè§å¨æ¯æçä¸æ¯å¾å¥½\n      // å¯ä»¥ç¨ rgba æ¥ä»£æ¿ï¼ä½åªè½éæè®¾ç½®ï¼ä¸å¯ä»¥éçé¢è²åéæåº¦çååå¨æè®¾ç½®\n      // https://drafts.csswg.org/css-color/#modifying-colors\n      @supports (background-color: color(green a(10%))) {\n        @if $important {\n          background-color: color(#{$css-var} a(#{percentage($opacity)})) !important;\n        } @else {\n          background-color: color(#{$css-var} a(#{percentage($opacity)}));\n        }\n      }\n    } @else {\n      // ä¹å¯ä»¥ä½¿ç¨ alpha($color); åºå«æ¯ function alpha ä¹å¯ä»¥å¤ç the proprietary Microsoft `alpha(opacity=20)\n      // è function opacity åªæ¯æé¢è²å¼ï¼å¦æä¸æ¯é¢è²å¼åæ¥é\n      $alpha: opacity($color);\n\n      @if ($alpha != 1) {\n        @if $important {\n          #{$property}: $color !important;\n        } @else {\n          #{$property}: $color;\n        }\n      } @else {\n        @if $important {\n          #{$property}: rgba($color, $opacity) !important;\n        } @else {\n          #{$property}: rgba($color, $opacity);\n        }\n      }\n    }\n\n    // å ä¸ºä¸æ¯æä»¥ä¸åæ³ï¼æä»¥åªå¤ç $opacity == 1 çæåµ\n    // #{$property}: rgba(var(--theme-#{$style}, $color), $opacity);\n    @if ($opacity == 1) {\n      #{$property}: var(--theme-#{$style}, $color);\n    }\n  }\n}\n\n// ç³å theme-color-prop å theme-contrast-tone-prop\n// å¦æ $style æ¯é¢è²å¼ï¼åç´æ¥è®¾ç½®é¢è²\n@mixin theme-prop($property, $style, $important: false) {\n  @if type-of($style) == \"color\" {\n    @if $important {\n      #{$property}: $style !important;\n    } @else {\n      #{$property}: $style;\n    }\n  } @else {\n    $color: map-get($theme-property-values, $style);\n\n    @if ($color) {\n      @include theme-color-prop($property, $style, $important);\n    } @else {\n      $color: map-get($theme-contrast-tone-property-values, $style);\n\n      @if ($color) {\n        @include theme-contrast-tone-prop($property, $style, $important);\n      } @else {\n        // ç¨è¾å©é¢è²æ¥è®¾ç½®\n        $color: map-get($theme-assist-colors, $style);\n\n        @if ($color) {\n          @include theme-assist($property, $style, $important: $important);\n        } @else {\n          @error \"æ æçä¸»é¢å±æ§å¼ï¼#{$style} å¿é¡»æ¯ä»¥ä¸çæä¸ key #{map-keys($theme-property-values)}, #{map-keys($theme-contrast-tone-property-values)}\";\n        }\n      }\n    }\n  }\n}\n\n// éè¿è®¾ç½®ååæ¯æ¥å®å¶ä¸»é¢ï¼è¯¥ mixin åªå¤çç®åç color å background-color ï¼å¯¹äºæ´å¤å¶çéè¦ç»ä»¶åç¬å®ä¹\n// $style æ $theme-property-values æ $theme-assist-colors ä¸­å±æ§å¼\n// $fore true æåæ¯ï¼false æèæ¯ï¼é»è®¤ true\n@mixin theme($style, $fore: true) {\n  $themes: $theme-property-values;\n  $themes: map-merge($theme-assist-colors, $themes);\n  $color: map-get($themes, $style);\n\n  @if ($color == null) {\n    @error \"æ æçä¸»é¢å±æ§å¼ï¼#{$style} å¿é¡»æ¯ä»¥ä¸çæä¸ key #{map-keys($theme-property-values)}, #{map-keys($theme-assist-colors)}\";\n  }\n\n  // è²è°ï¼å¤æ­æ¯æ·±è²è¿æ¯æµè²\n  $tone: theme-tone($color);\n  // å¯¹æ¯è²è°\n  $contrast-tone: theme-contrast-tone($color);\n\n  @if ($fore) {\n    color: $color;\n    color: var(--theme-#{$style}, $color);\n    background-color: map-get($theme-contrast-tone-property-values, primary-on-#{$tone});\n    background-color: var(--theme-#{$contrast-tone}-primary, map-get($theme-contrast-tone-property-values, primary-on-#{$tone}));\n  } @else {\n    color: map-get($theme-contrast-tone-property-values, primary-on-#{$tone});\n    color: var(--theme-#{$contrast-tone}-primary, map-get($theme-contrast-tone-property-values, primary-on-#{$tone}));\n    background-color: $color;\n    background-color: var(--theme-#{$style}, $color);\n  }\n}\n\n// è®¾ç½®ä¸»é¢å¯¹åºçèæ¯ååæ¯é¢è² class\n// å¦æ $tone è®¾ä¸º trueï¼åä¼ç»åºå¯¹åºçåæ¯æèæ¯å¯¹æ¯é¢è²è²è°å¼ï¼æ·±è²ææµè²ï¼ï¼\n// è¿æ ·å¯ä»¥çªåºå¯¹æ¯åº¦ï¼æ¹ä¾¿éè¯»ï¼å¨éè¦çå°æ¹å¯ä»¥è°ç¨è¯¥ mixin ï¼å¹¶ä¸åæ° $tone è®¾ä¸º true å³å¯\n@mixin theme-classes($tone: false) {\n  @each $style, $color in $theme-property-values {\n    $color-alpha: alpha($color);\n\n    // è®¾ç½® primary å secondary ä»¥åæµè²åæ·±è²èæ¯é¢è²\n    // .theme-primary-bg {background-color: #2196f3; background-color: var(--theme-primary, #2196f3);}\n    // å¯¹äº $style å¼ä¸º background æ¶\n    // .theme-background {background-color: #fff; background-color: var(--theme-background, #fff);}\n    $class-name: if($style == \"background\", $style, #{$style}-bg);\n\n    .theme-#{$class-name} {\n      @include theme-prop(background-color, $style, true);\n\n      @if ($tone) {\n        @if ($color-alpha == 1) {\n          @include theme-prop(color, primary-on-#{$style}, true);\n        } @else {\n          @include theme-prop(color, primary-on-light, true);\n        }\n      }\n    }\n\n    // è®¾ç½® primary å secondary ä»¥åæµè²åæ·±è²åæ¯é¢è²\n    // .theme-primary {color: #2196f3; color: var(--theme-primary, #2196f3);}\n    @if $style != \"background\" {\n      .theme-#{$style} {\n        @include theme-prop(color, $style, true);\n\n        @if ($tone) {\n          @if ($color-alpha == 1) {\n            @include theme-prop(background-color, primary-on-#{$style}, true);\n          } @else {\n            @include theme-prop(background-color, primary-on-dark, true);\n          }\n        }\n      }\n    }\n  }\n}\n\n// è®¾ç½®è¾å©é¢è²å¯¹åºçèæ¯ååæ¯é¢è² class\n// å¦æ $tone è®¾ä¸º trueï¼åä¼ç»åºå¯¹åºçåæ¯æèæ¯å¯¹æ¯é¢è²è²è°å¼ï¼æ·±è²ææµè²ï¼ï¼\n// è¿æ ·å¯ä»¥çªåºå¯¹æ¯åº¦ï¼æ¹ä¾¿éè¯»ï¼å¨éè¦çå°æ¹å¯ä»¥è°ç¨è¯¥ mixin ï¼å¹¶ä¸åæ° $tone è®¾ä¸º true å³å¯\n@mixin theme-assist-classes($tone: false) {\n  @each $theme, $color in $theme-assist-colors {\n    $color-alpha: alpha($color);\n\n    // è¾å©é¢è²èæ¯è²\n    // .theme-success-bg {background-color: #4caf50; background-color: var(--theme-success, #4caf50);}\n    .theme-#{$theme}-bg {\n      background-color: $color !important;\n      background-color: var(--theme-#{$theme}, $color) !important;\n\n      @if ($tone) {\n        $contrast-tone: if($color-alpha == 1, theme-contrast-tone($color), \"dark\");\n        $color: map-get(map-get($theme-text-colors, $contrast-tone), primary);\n\n        color: $color !important;\n      }\n    }\n\n    // è¾å©é¢è²åæ¯è²\n    // .theme-success {color: #4caf50; color: var(--theme-success, #4caf50);}\n    .theme-#{$theme} {\n      color: $color !important;\n      color: var(--theme-#{$theme}, $color) !important;\n\n      @if ($tone) {\n        $contrast-tone: theme-contrast-tone($color);\n        $color: map-get(map-get($theme-text-colors, $contrast-tone), primary);\n\n        background-color: $color !important;\n      }\n    }\n  }\n}\n\n// è®¾ç½®ç°åº¦é¢è²å¯¹åºçèæ¯ååæ¯é¢è² class\n// å¦æ $tone è®¾ä¸º trueï¼åä¼ç»åºå¯¹åºçåæ¯æèæ¯å¯¹æ¯é¢è²è²è°å¼ï¼æ·±è²ææµè²ï¼ï¼\n// è¿æ ·å¯ä»¥çªåºå¯¹æ¯åº¦ï¼æ¹ä¾¿éè¯»ï¼å¨éè¦çå°æ¹å¯ä»¥è°ç¨è¯¥ mixin ï¼å¹¶ä¸åæ° $tone è®¾ä¸º true å³å¯\n@mixin theme-grey-classes($tone: false) {\n  // ç°åº¦é¢è²åæ¯-èæ¯é¢è²å¼\n  @each $theme, $color in $greys {\n    .theme-grey-#{$theme} {\n      color: $color !important;\n\n      @if ($tone) {\n        $contrast-tone: theme-contrast-tone($color);\n        $color: map-get(map-get($theme-text-colors, $contrast-tone), primary);\n\n        background-color: $color !important;\n      }\n    }\n\n    .theme-grey-bg-#{$theme} {\n      background-color: $color !important;\n\n      @if ($tone) {\n        $contrast-tone: theme-contrast-tone($color);\n        $color: map-get(map-get($theme-text-colors, $contrast-tone), primary);\n\n        color: $color !important;\n      }\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n/**\n * 计算两种颜色的对比度，一般指前景色和背景色\n * https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests 第3点\n */\n\n/**\n * 计算两种颜色的对比度，一般指前景色和背景色\n * https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests 第3点\n */\n\n/**\n * Applies the correct theme color style to the specified property.\n * $property is typically color or background-color, but can be any CSS property that accepts color values.\n * $style should be one of the map keys in $theme-property-values (_variables.scss).\n */\n\n.navbar-primary {\n  background-color: #1976d2;\n  background-color: var(--theme-primary-dark, #1976d2);\n}\n\n.drawer-toggle .icon-pure-menu {\n  color: rgba(255, 255, 255, 0.7);\n  color: var(--theme-light-secondary, rgba(255, 255, 255, 0.7));\n}\n\n.drawer-toggle:hover .icon-pure-menu {\n  color: #fff;\n  color: var(--theme-light-primary, #fff);\n}\n\n/**\n * 计算两种颜色的对比度，一般指前景色和背景色\n * https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests 第3点\n */\n\n/**\n* 关于 font weight 的设置，跟字体粗细值有关\n* 1. 在 Safari 和 IOS 系统下，默认字体粗细分为\n    100-300   400-500  600-700  800-900  四种，对应为\n    lighter 比从父元素继承来的值更细(处在字体可行的粗细值范围内)。\n    normal 正常粗细，与400等值。\n    bold 加粗， 与700等值\n    bolder 比从父元素继承来的值更粗 (处在字体可行的粗细值范围内)。\n 如果设为 -apple-system 或 \"PingFang SC\"时，就会有更多的字体粗细，\n  100 200 300 400 500 600-900 六种粗细\n  其中 lighter 对应 100    normal 对应 400    bold 对应 700    bolder 对应 700\n\n*  2 在 Chrome 下，默认字体粗细只有两种\n   100-400 500-900 对应为 normal 和 bold，如果设置为 lighter，则等价于 normal， 设为 bolder 等价于 bold\n   如果设为 \"PingFang SC\" 同样有六种字体粗细，参考上面\n* 所以 font-weight 字体粗细跟字体有关。关于字体粗细的回退机制可以参考以下文章\n  https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-weight\n**/\n\n/* stylelint-disable value-keyword-case */\n\n.footer-assist {\n  margin-top: 3.3125rem;\n}\n\n.footer {\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  padding: 1rem 0;\n  border-top: 1px solid rgba(0, 0, 0, 0.12);\n  color: rgba(0, 0, 0, 0.54);\n  background: #fff;\n}\n\n.component-wrap {\n  padding: 0 4rem 1rem;\n}\n\n.component-wrap h1,\n.component-wrap h2,\n.component-wrap h3 {\n  margin-top: 3rem;\n}\n\n.component-wrap h4,\n.component-wrap h5 {\n  margin-top: 2rem;\n}\n\n.component-wrap h1,\n.component-wrap h2,\n.component-wrap h3,\n.component-wrap h4,\n.component-wrap h5 {\n  margin-bottom: 1rem;\n}\n\n.component-wrap p {\n  margin-bottom: 1rem;\n}\n\n","// é¡µé¢åºé¨æ ·å¼\n\n@import \"../../../../components/theme/variable\";\n@import \"../../../../components/base/variables/font\";\n\n.footer-assist {\n  // æ­¤å¤çæ°å¼ç­äº footer çé«åº¦ + é¢ççé´è·\n  margin-top: $font-size-base * $line-height-base + 2rem;\n}\n\n.footer {\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  padding: 1rem 0;\n  border-top: 1px solid $grey-color-300;\n  color: map-get(map-get($theme-text-colors, dark), secondary);\n  background: #fff;\n}\n",".component-wrap {\n  padding: 0 4rem 1rem;\n\n  h1, h2, h3 {\n    margin-top: 3rem;\n  }\n\n  h4, h5 {\n    margin-top: 2rem;\n  }\n\n  h1, h2, h3, h4, h5 {\n    margin-bottom: 1rem;\n  }\n\n  p {\n    margin-bottom: 1rem;\n  }\n}\n"],"sourceRoot":""}