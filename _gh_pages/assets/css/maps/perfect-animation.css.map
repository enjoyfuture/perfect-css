{"version":3,"sources":["perfect-animation.css","etc/variables/_font.scss","etc/mixins/_breakpoints.scss","etc/_functions.scss"],"names":[],"mappings":"AAAA,iBAAiB;ACsCjB;;;;;;;;;;;;;;;;;GAiBG;ACvDH;;;;;;;;;GASG;AAEH;;;;;;;;;GASG;AAMH;;;;GAIG;AAMH;;;;GAIG;AAMH;;;;GAIG;AAKH;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AAYH;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AAYH;;;;;;;;;;;;;GAaG;AAaH;;;;;;;;;;;;;GAaG;AAOH,uDAAA;AC3IA;;;GAGG","file":"../perfect-animation.css","sourcesContent":["@charset \"UTF-8\";\n/**\n* 关于 font weight 的设置，跟字体粗细值有关\n* 1. 在 Safari 和 IOS 系统下，默认字体粗细分为\n    100-300   400-500  600-700  800-900  四种，对应为\n    lighter 比从父元素继承来的值更细(处在字体可行的粗细值范围内)。\n    normal 正常粗细，与400等值。\n    bold 加粗， 与700等值\n    bolder 比从父元素继承来的值更粗 (处在字体可行的粗细值范围内)。\n 如果设为 -apple-system 或 \"PingFang SC\"时，就会有更多的字体粗细，\n  100 200 300 400 500 600-900 六种粗细\n  其中 lighter 对应 100    normal 对应 400    bold 对应 700    bolder 对应 700\n\n*  2 在 Chrome 下，默认字体粗细只有两种\n   100-400 500-900 对应为 normal 和 bold，如果设置为 lighter，则等价于 normal， 设为 bolder 等价于 bold\n   如果设为 \"PingFang SC\" 同样有六种字体粗细，参考上面\n* 所以 font-weight 字体粗细跟字体有关。关于字体粗细的回退机制可以参考以下文章\n  https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-weight\n**/\n/**\n* 响应式和媒体查询，设备大小分界点为\n{\n  xs: 0,\n  sm: 576px,\n  md: 768px,\n  lg: 992px,\n  xl: 1200px\n}\n */\n/**\n* 返回响应式设备大小的下一个名称值\n* $name 当前值\n* $breakpoint 响应式布局列表值\n* $breakpoint-names 对应的所有键\n* 比如 breakpoint-next(sm)  结果为 md\n* breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px)) 结果为 md\n* breakpoint-next(sm, $breakpoint-names: (xs sm md)) 结果为 md\n* breakpoint-next(md, $breakpoint-names: (xs sm md)) 结果为 null\n */\n/**\n* 根据键返回响应式对应的媒体查询区间值的最小值， 如果没找到或值为0返回 null\n* breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px)) 结果为 576px\n* breakpoint-min(xs, (xs: 0, sm: 576px, md: 768px)) 结果为 null\n */\n/**\n* 根据键返回响应式对应的媒体查询区间值的最大值（即为下一个拐点值 - 1px）， 如果没找到返回 null\n* breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px)) 结果为 767px\n* breakpoint-max(md, (xs: 0, sm: 576px, md: 768px)) 结果为 null\n */\n/**\n* 如果 $name 为响应式最小值对应的键，怎返回一个空字符串，否则返回键前面加一个破折号，\n* breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px)) 结果为 \"\"\n* breakpoint-infix(md, (xs: 0, sm: 576px, md: 768px)) 结果为 \"-md\"\n */\n/**\n* 如果 $name 为最小值，即 xs 时，则不用媒体查询输出样式，否则为媒体查询输出，\n* 并设置其最小宽度，即当设备宽度达到该值时，应用定义的该样式\n.test {\n  @include media-breakpoint-up(sm) {\n    color: red;\n  }\n}\n输出结果为\n@media (min-width: 576px) {\n  .test {\n    color: red;\n  }\n}\n\n.test {\n  @include media-breakpoint-up(sm) {\n    color: red;\n  }\n}\n输出结果为\n.test {\n  color: red;\n}\n */\n/**\n* 跟 media-breakpoint-up 相反 如果 $name 为最大值，即 xl 时，则使用媒体查询输出样式，否则不用媒体查询输出，\n* 并设置其最大宽度，即当设备宽度小于等于该值时，应用定义的该样式\n.test {\n  @include media-breakpoint-down(sm) {\n    color: red;\n  }\n}\n输出结果为\n@media (max-width: 767px) {\n  .test {\n    color: red;\n  }\n}\n\n.test {\n  @include media-breakpoint-down(xl) {\n    color: red;\n  }\n}\n输出结果为\n.test {\n  color: red;\n}\n */\n/**\n* 设置媒体查询最大和最小区间样式\n.test {\n  @include media-breakpoint-between(sm, lg) {\n    color: red;\n  }\n}\n输出结果为\n@media (min-width: 576px) and (max-width: 1199px) {\n  .test {\n    color: red;\n  }\n}\n */\n/**\n* 设置某一媒体查询区间最大和最小区间样式，比如 sm 的区间为 576px  767px\n.test {\n  @include media-breakpoint-only(sm) {\n    color: red;\n  }\n}\n输出结果为\n@media (min-width: 576px) and (max-width: 767px) {\n  .test {\n    color: red;\n  }\n}\n */\n/* 如果我们不使用响应式布局时，即把变量值 $enable-breakpoint 设为 false 时，*/\n/*// 自定义 pow 函数，实现 n 的 m 次方，n 和 m 为任意正数\n@function pow2($n, $m) {\n  @return pow($n, $m)\n}*/\n","// 设置全局字体，使用系统自带的字体，参考 https://www.smashingmagazine.com/2015/11/using-system-ui-fonts-practical-guide/\n\n// sass-lint:disable indentation\n$font-family:\n    // 设置数字字体等宽，更紧凑美观，同时也会影响到超链接字体\n  Helvetica Neue For Number,\n    // Safari for OS X and iOS (San Francisco)\n  -apple-system,\n    // Chrome >= 56 for OS X (San Francisco), Windows, Linux and Android\n  system-ui,\n    // Chrome < 56 for OS X (San Francisco)\n  BlinkMacSystemFont,\n    // Windows\n  \"Segoe UI\",\n    // Android\n  \"Roboto\",\n    // 平方字体，字体对比度更强，更细长\n  PingFang SC,\n    // 备用字体\n  Hiragino Sans GB,\n    // 在 window 系统下备用字体\n  Microsoft YaHei,\n    // Basic web fallback\n  \"Helvetica Neue\", Arial, sans-serif !default;\n\n// 代码标签使用改字体，用在 code, kbd, pre, samp 中\n$font-family-monospace: Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace !default;\n\n// 字体大小，基于 rem ，根字体不在设置，使用浏览器默认字体 16px\n$font-size-base: .875rem !default; // 设置在 body 上，表示默认字体为 14px\n// 设置除去 h1~h6 和 display 后的字体\n$font-size-lg: 1.25rem !default; // 20px\n$font-size-sm: .875rem !default; // 14px\n$font-size-xs: .75rem !default; // 12px 一般浏览器支持的最小字体\n\n$line-height-base: 1.5 !default;\n\n// font weight\n/**\n* 关于 font weight 的设置，跟字体粗细值有关\n* 1. 在 Safari 和 IOS 系统下，默认字体粗细分为\n    100-300   400-500  600-700  800-900  四种，对应为\n    lighter 比从父元素继承来的值更细(处在字体可行的粗细值范围内)。\n    normal 正常粗细，与400等值。\n    bold 加粗， 与700等值\n    bolder 比从父元素继承来的值更粗 (处在字体可行的粗细值范围内)。\n 如果设为 -apple-system 或 \"PingFang SC\"时，就会有更多的字体粗细，\n  100 200 300 400 500 600-900 六种粗细\n  其中 lighter 对应 100    normal 对应 400    bold 对应 700    bolder 对应 700\n\n*  2 在 Chrome 下，默认字体粗细只有两种\n   100-400 500-900 对应为 normal 和 bold，如果设置为 lighter，则等价于 normal， 设为 bolder 等价于 bold\n   如果设为 \"PingFang SC\" 同样有六种字体粗细，参考上面\n* 所以 font-weight 字体粗细跟字体有关。关于字体粗细的回退机制可以参考以下文章\n  https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-weight\n**/\n\n$font-weight-lighter: lighter !default;\n$font-weight-normal: normal !default;\n$font-weight-bold: bold !default;\n$font-weight-base: $font-weight-normal !default;\n\n// dt font\n$dt-font-weight: $font-weight-bold !default;\n\n","/**\n* 响应式和媒体查询，设备大小分界点为\n{\n  xs: 0,\n  sm: 576px,\n  md: 768px,\n  lg: 992px,\n  xl: 1200px\n}\n */\n\n/**\n* 返回响应式设备大小的下一个名称值\n* $name 当前值\n* $breakpoint 响应式布局列表值\n* $breakpoint-names 对应的所有键\n* 比如 breakpoint-next(sm)  结果为 md\n* breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px)) 结果为 md\n* breakpoint-next(sm, $breakpoint-names: (xs sm md)) 结果为 md\n* breakpoint-next(md, $breakpoint-names: (xs sm md)) 结果为 null\n */\n@function breakpoint-next($name, $breakpoints: $responsive-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n/**\n* 根据键返回响应式对应的媒体查询区间值的最小值， 如果没找到或值为0返回 null\n* breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px)) 结果为 576px\n* breakpoint-min(xs, (xs: 0, sm: 576px, md: 768px)) 结果为 null\n */\n@function breakpoint-min($name, $breakpoints: $responsive-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n/**\n* 根据键返回响应式对应的媒体查询区间值的最大值（即为下一个拐点值 - 1px）， 如果没找到返回 null\n* breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px)) 结果为 767px\n* breakpoint-max(md, (xs: 0, sm: 576px, md: 768px)) 结果为 null\n */\n@function breakpoint-max($name, $breakpoints: $responsive-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);\n}\n\n/**\n* 如果 $name 为响应式最小值对应的键，怎返回一个空字符串，否则返回键前面加一个破折号，\n* breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px)) 结果为 \"\"\n* breakpoint-infix(md, (xs: 0, sm: 576px, md: 768px)) 结果为 \"-md\"\n */\n@function breakpoint-infix($name, $breakpoints: $responsive-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n/**\n* 如果 $name 为最小值，即 xs 时，则不用媒体查询输出样式，否则为媒体查询输出，\n* 并设置其最小宽度，即当设备宽度达到该值时，应用定义的该样式\n.test {\n  @include media-breakpoint-up(sm) {\n    color: red;\n  }\n}\n输出结果为\n@media (min-width: 576px) {\n  .test {\n    color: red;\n  }\n}\n\n.test {\n  @include media-breakpoint-up(sm) {\n    color: red;\n  }\n}\n输出结果为\n.test {\n  color: red;\n}\n */\n@mixin media-breakpoint-up($name, $breakpoints: $responsive-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n/**\n* 跟 media-breakpoint-up 相反 如果 $name 为最大值，即 xl 时，则使用媒体查询输出样式，否则不用媒体查询输出，\n* 并设置其最大宽度，即当设备宽度小于等于该值时，应用定义的该样式\n.test {\n  @include media-breakpoint-down(sm) {\n    color: red;\n  }\n}\n输出结果为\n@media (max-width: 767px) {\n  .test {\n    color: red;\n  }\n}\n\n.test {\n  @include media-breakpoint-down(xl) {\n    color: red;\n  }\n}\n输出结果为\n.test {\n  color: red;\n}\n */\n@mixin media-breakpoint-down($name, $breakpoints: $responsive-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n/**\n* 设置媒体查询最大和最小区间样式\n.test {\n  @include media-breakpoint-between(sm, lg) {\n    color: red;\n  }\n}\n输出结果为\n@media (min-width: 576px) and (max-width: 1199px) {\n  .test {\n    color: red;\n  }\n}\n */\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $responsive-breakpoints) {\n  @include media-breakpoint-up($lower, $breakpoints) {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n\n/**\n* 设置某一媒体查询区间最大和最小区间样式，比如 sm 的区间为 576px  767px\n.test {\n  @include media-breakpoint-only(sm) {\n    color: red;\n  }\n}\n输出结果为\n@media (min-width: 576px) and (max-width: 767px) {\n  .test {\n    color: red;\n  }\n}\n */\n@mixin media-breakpoint-only($name, $breakpoints: $responsive-breakpoints) {\n  @include media-breakpoint-between($name, $name, $breakpoints) {\n    @content;\n  }\n}\n\n/* 如果我们不使用响应式布局时，即把变量值 $enable-breakpoint 设为 false 时，*/\n@mixin no-media-breakpoint() {\n  @content;\n}\n\n","// rgba 转换为 rgb，需要颜色值 $color 和背景色 $background\n// rgba-to-rgb(rgba(0, 0, 0, .65), #ffffff) => #595959\n// 该方法主要处理 ie8 及以下不支持 rgba，具体解决方法可参考\n// https://stackoverflow.com/questions/6902944/sass-mixin-for-background-transparency-back-to-ie8\n@function rgba-to-rgb($color, $background) {\n  $red: (1 - alpha($color)) * red($background) + alpha($color) * red($color);\n  $green: (1 - alpha($color)) * green($background) + alpha($color) * green($color);\n  $blue: (1 - alpha($color)) * blue($background) + alpha($color) * blue($color);\n  @return rgb($red, $green, $blue);\n}\n\n@function rgb-to-rgba($color) {\n  $red: red($color);\n  $green: green($color);\n  $blue: blue($color);\n  $min: min($red, $green, $blue);\n  $alpha: (255 - $min) / 255;\n\n  // alpha 保留两位有效数字\n  @return rgba(\n      ($red - $min) / $alpha,\n      ($green - $min) / $alpha,\n      ($blue - $min) / $alpha,\n      round($alpha * 100) / 100);\n}\n\n@function sum($z) {\n  @if $z == 1 {\n    @return $z;\n  } @else {\n    @return $z + sum($z - 1);\n  }\n}\n\n/*// 自定义 pow 函数，实现 n 的 m 次方，n 和 m 为任意正数\n@function pow2($n, $m) {\n  @return pow($n, $m)\n}*/\n"]}