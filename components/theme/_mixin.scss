// theme mixin
@import "./variable";
@import "./function";

/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $theme-property-values (_variables.scss).
 */

// 给属性 $property 设置颜色 $style 值
// 属性 $property 一般用在 color background-color border-color 等，也可用在任何可以设置颜色值的属性上
// $style 应该是 $theme-property-values 中某个 key
// 该 mixin 主要用来设置主题颜色值，并且设置了主题 css 变量值
// 用户通过修改 css 变量值可以动态的修改整个主题值，比如在 body 上修改 css 变量值
@mixin theme-color-prop($property, $style, $important) {
  @if $important {
    #{$property}: map-get($theme-property-values, $style) !important;
    #{$property}: var(--theme-#{$style}, map-get($theme-property-values, $style)) !important;
  } @else {
    #{$property}: map-get($theme-property-values, $style);
    #{$property}: var(--theme-#{$style}, map-get($theme-property-values, $style));
  }
}

// 用来设置主题色对应的对比色调值，浅色还是深色
// $style 应该是 $theme-contrast-tone-property-values 中某个 key
// 该 mixin 除了设置了对比色调值，还设置了对应的 css 变量值
@mixin theme-contrast-tone-prop($property, $style, $important) {
  // 根据 $style 返回变量，主要是 light 或 dark 变量
  $theme-var: theme-contrast-tone-var($style);

  @if $important {
    #{$property}: map-get($theme-contrast-tone-property-values, $style) !important;
    #{$property}: var(--theme-#{$theme-var}, map-get($theme-contrast-tone-property-values, $style)) !important;
  } @else {
    #{$property}: map-get($theme-contrast-tone-property-values, $style);
    #{$property}: var(--theme-#{$theme-var}, map-get($theme-contrast-tone-property-values, $style));
  }
}

// 设置辅助颜色 mixin
// 根据给定的 $style ($theme-assist-colors 中的 key) 和 $opacity 设置颜色
@mixin theme-assist($property, $style, $opacity: 1, $important: false) {

  $color: map-get($theme-assist-colors, $style);

  @if ($property == "backgroud-color" and $opacity != 1) {
    // 变量 --theme-#{$style} 在 theme.scss 中定义
    $css-var: var(--theme-#{$style}, $color);

    @if $important {
      background-color: rgba($color, $opacity) !important;
    } @else {
      background-color: rgba($color, $opacity);
    }

    // 可以动态的设置颜色透明度，属于 CSS 4 color 范畴，目前浏览器支持的不是很好
    // 可以用 rgba 来代替，但只能静态设置，不可以随着颜色和透明度的变化动态设置
    // https://drafts.csswg.org/css-color/#modifying-colors
    @supports (background-color: color(green a(10%))) {
      @if $important {
        background-color: color(#{$css-var} a(#{percentage($opacity)})) !important;
      } @else {
        background-color: color(#{$css-var} a(#{percentage($opacity)}));
      }
    }
  } @else {
    // 也可以使用 alpha($color); 区别是 function alpha 也可以处理 the proprietary Microsoft `alpha(opacity=20)
    // 而 function opacity 只支持颜色值，如果不是颜色值则报错
    $alpha: opacity($color);

    @if ($alpha == 1) {
      @if $important {
        #{$property}: $color !important;
      } @else {
        #{$property}: $color;
      }
    } @else {
      @if $important {
        #{$property}: rgba($color, $opacity) !important;
      } @else {
        #{$property}: rgba($color, $opacity);
      }
    }
  }

  // 因为不支持以下写法，所以只处理 $opacity == 1 的情况
  // #{$property}: rgba(var(--theme-#{$style}, $color), $opacity);
  @if ($opacity == 1) {
    @if $important {
      #{$property}: var(--theme-#{$style}, $color) !important;
    } @else {
      #{$property}: var(--theme-#{$style}, $color);
    }
  }
}

// 糅合 theme-color-prop 和 theme-contrast-tone-prop 和 theme-assist
// 如果 $style 是颜色值，则直接设置颜色
@mixin theme-prop($property, $style, $opacity: 1, $important: false) {
  // 如果是颜色值，则直接设置
  @if theme-is-valid-theme-prop-value($style) {
    @if $important {
      #{$property}: $style !important;
    } @else {
      #{$property}: $style;
    }
  } @else {
    // 看是否在 $theme-property-values 中
    $color: map-get($theme-property-values, $style);

    @if ($color) {
      @include theme-color-prop($property, $style, $important);
    } @else {
      // 再判断是否在 $theme-contrast-tone-property-values 中
      $color: map-get($theme-contrast-tone-property-values, $style);

      @if ($color) {
        @include theme-contrast-tone-prop($property, $style, $important);
      } @else {
        // 最后判断是否在辅助颜色 $theme-assist-colors 中
        $color: map-get($theme-assist-colors, $style);

        @if ($color) {
          @include theme-assist($property, $style, $opacity, $important);
        } @else {
          @error "无效的主题属性值，#{$style} 必须是以下的某一 key $theme-property-values: #{map-keys($theme-property-values)}, $theme-contrast-tone-property-values: #{map-keys($theme-contrast-tone-property-values)}, $theme-assist-colors: #{map-keys($theme-assist-colors)}";
        }
      }
    }
  }
}

// 通过设置前后景来定制主题，该 mixin 只处理简单的 color 和 background-color ，对于更复制的需要组件单独定义
// $style 指 $theme-property-values 或 $theme-assist-colors 中属性值
// $fore true 指前景，false 指背景，默认 true
@mixin theme($style, $fore: true) {
  $themes: $theme-property-values;
  $themes: map-merge($theme-assist-colors, $themes);
  $color: map-get($themes, $style);

  @if ($color == null) {
    @error "无效的主题属性值，#{$style} 必须是以下的某一 key $theme-property-values: #{map-keys($theme-property-values)}, $theme-assist-colors: #{map-keys($theme-assist-colors)}";
  }

  // 色调，判断是深色还是浅色
  $tone: theme-tone($color);
  // 对比色调
  $contrast-tone: theme-contrast-tone($color);

  @if ($fore) {
    color: $color;
    color: var(--theme-#{$style}, $color);
    background-color: map-get($theme-contrast-tone-property-values, primary-on-#{$tone});
    background-color: var(--theme-#{$contrast-tone}-primary, map-get($theme-contrast-tone-property-values, primary-on-#{$tone}));
  } @else {
    color: map-get($theme-contrast-tone-property-values, primary-on-#{$tone});
    color: var(--theme-#{$contrast-tone}-primary, map-get($theme-contrast-tone-property-values, primary-on-#{$tone}));
    background-color: $color;
    background-color: var(--theme-#{$style}, $color);
  }
}

// 设置主题对应的背景和前景颜色 class
// 如果 $tone 设为 true，则会给出对应的前景或背景对比颜色色调值（深色或浅色），
// 这样可以突出对比度，方便阅读，在需要的地方可以调用该 mixin ，并且参数 $tone 设为 true 即可
@mixin theme-classes($tone: false) {
  @each $style, $color in $theme-property-values {
    $color-alpha: alpha($color);

    // 设置 primary 和 secondary 以及浅色和深色背景颜色
    // .theme-primary-bg {background-color: #2196f3; background-color: var(--theme-primary, #2196f3);}
    // 对于 $style 值为 background 时
    // .theme-background {background-color: #fff; background-color: var(--theme-background, #fff);}
    $class-name: if($style == "background", $style, #{$style}-bg);

    .theme-#{$class-name} {
      @include theme-prop(background-color, $style, true);

      @if ($tone) {
        @if ($color-alpha == 1) {
          @include theme-prop(color, primary-on-#{$style}, true);
        } @else {
          @include theme-prop(color, primary-on-light, true);
        }
      }
    }

    // 设置 primary 和 secondary 以及浅色和深色前景颜色
    // .theme-primary {color: #2196f3; color: var(--theme-primary, #2196f3);}
    @if $style != "background" {
      .theme-#{$style} {
        @include theme-prop(color, $style, true);

        @if ($tone) {
          @if ($color-alpha == 1) {
            @include theme-prop(background-color, primary-on-#{$style}, true);
          } @else {
            @include theme-prop(background-color, primary-on-dark, true);
          }
        }
      }
    }
  }
}

// 设置辅助颜色对应的背景和前景颜色 class
// 如果 $tone 设为 true，则会给出对应的前景或背景对比颜色色调值（深色或浅色），
// 这样可以突出对比度，方便阅读，在需要的地方可以调用该 mixin ，并且参数 $tone 设为 true 即可
@mixin theme-assist-classes($tone: false) {
  @each $theme, $color in $theme-assist-colors {
    $color-alpha: alpha($color);

    // 辅助颜色背景色
    // .theme-success-bg {background-color: #4caf50; background-color: var(--theme-success, #4caf50);}
    .theme-#{$theme}-bg {
      background-color: $color !important;
      background-color: var(--theme-#{$theme}, $color) !important;

      @if ($tone) {
        $contrast-tone: if($color-alpha == 1, theme-contrast-tone($color), "dark");
        $color: map-get(map-get($theme-text-colors, $contrast-tone), primary);

        color: $color !important;
      }
    }

    // 辅助颜色前景色
    // .theme-success {color: #4caf50; color: var(--theme-success, #4caf50);}
    .theme-#{$theme} {
      color: $color !important;
      color: var(--theme-#{$theme}, $color) !important;

      @if ($tone) {
        $contrast-tone: theme-contrast-tone($color);
        $color: map-get(map-get($theme-text-colors, $contrast-tone), primary);

        background-color: $color !important;
      }
    }
  }
}

// 设置灰度颜色对应的背景和前景颜色 class
// 如果 $tone 设为 true，则会给出对应的前景或背景对比颜色色调值（深色或浅色），
// 这样可以突出对比度，方便阅读，在需要的地方可以调用该 mixin ，并且参数 $tone 设为 true 即可
@mixin theme-grey-classes($tone: false) {
  // 灰度颜色前景-背景颜色值
  @each $theme, $color in $greys {
    .theme-grey-#{$theme} {
      color: $color !important;

      @if ($tone) {
        $contrast-tone: theme-contrast-tone($color);
        $color: map-get(map-get($theme-text-colors, $contrast-tone), primary);

        background-color: $color !important;
      }
    }

    .theme-grey-bg-#{$theme} {
      background-color: $color !important;

      @if ($tone) {
        $contrast-tone: theme-contrast-tone($color);
        $color: map-get(map-get($theme-text-colors, $contrast-tone), primary);

        color: $color !important;
      }
    }
  }
}
